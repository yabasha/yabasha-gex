import { describe, expect, it } from 'vitest'

import type { Report } from '../types.js'

import { renderMarkdown } from './md.js'

describe('renderMarkdown', () => {
  const mockReport: Report = {
    report_version: '1.0',
    timestamp: '2025-01-13T12:00:00.000Z',
    tool_version: '0.3.2',
    project_name: 'test-project',
    project_version: '1.0.0',
    global_packages: [
      {
        name: '@yabasha/gex',
        version: '0.3.2',
        resolved_path: '/usr/local/lib/node_modules/@yabasha/gex',
      },
      {
        name: 'npm',
        version: '10.2.4',
        resolved_path: '/usr/local/lib/node_modules/npm',
      },
    ],
    local_dependencies: [
      {
        name: 'commander',
        version: '12.1.0',
        resolved_path: '/path/to/project/node_modules/commander',
      },
    ],
    local_dev_dependencies: [
      {
        name: 'vitest',
        version: '2.1.1',
        resolved_path: '/path/to/project/node_modules/vitest',
      },
    ],
  }

  it('should render valid markdown with header', () => {
    const result = renderMarkdown(mockReport)

    expect(result).toContain('# GEX Report')
    expect(result).toContain('_Generated by GEX_')
  })

  it('should include project metadata when available', () => {
    const reportWithExtras = {
      ...mockReport,
      project_description: 'A test project for GEX',
      project_homepage: 'https://example.com',
      project_bugs: 'https://github.com/example/issues',
    }

    const result = renderMarkdown(reportWithExtras)

    expect(result).toContain('## Project Metadata')
    expect(result).toContain('- Name: test-project')
    expect(result).toContain('- Version: 1.0.0')
    expect(result).toContain('- Description: A test project for GEX')
    expect(result).toContain('- Homepage: https://example.com')
    expect(result).toContain('- Bugs: https://github.com/example/issues')
  })

  it('should render global packages table', () => {
    const result = renderMarkdown(mockReport)

    expect(result).toContain('## Global Packages')
    expect(result).toContain('| Name | Version | Path |')
    expect(result).toContain('| --- | --- | --- |')
    expect(result).toContain('| @yabasha/gex | 0.3.2 | /usr/local/lib/node_modules/@yabasha/gex |')
    expect(result).toContain('| npm | 10.2.4 | /usr/local/lib/node_modules/npm |')
  })

  it('should render local dependencies table', () => {
    const result = renderMarkdown(mockReport)

    expect(result).toContain('## Local Dependencies')
    expect(result).toContain('| Name | Version | Path |')
    expect(result).toContain('| commander | 12.1.0 | /path/to/project/node_modules/commander |')
  })

  it('should render local dev dependencies table', () => {
    const result = renderMarkdown(mockReport)

    expect(result).toContain('## Local Dev Dependencies')
    expect(result).toContain('| vitest | 2.1.1 | /path/to/project/node_modules/vitest |')
  })

  it('should handle empty package arrays gracefully', () => {
    const emptyReport: Report = {
      report_version: '1.0',
      timestamp: '2025-01-13T12:00:00.000Z',
      tool_version: '0.3.2',
      global_packages: [],
      local_dependencies: [],
      local_dev_dependencies: [],
    }

    const result = renderMarkdown(emptyReport)

    expect(result).toContain('# GEX Report')
    expect(result).not.toContain('## Global Packages')
    expect(result).not.toContain('## Local Dependencies')
    expect(result).not.toContain('## Local Dev Dependencies')
    expect(result).toContain('_Generated by GEX_')
  })

  it('should handle report without project metadata', () => {
    const reportWithoutProject: Report = {
      report_version: '1.0',
      timestamp: '2025-01-13T12:00:00.000Z',
      tool_version: '0.3.2',
      global_packages: [],
      local_dependencies: [],
      local_dev_dependencies: [],
    }

    const result = renderMarkdown(reportWithoutProject)

    expect(result).not.toContain('## Project Metadata')
    expect(result).toContain('# GEX Report')
  })

  it('should handle packages with missing version and path', () => {
    const reportWithMissingData: Report = {
      report_version: '1.0',
      timestamp: '2025-01-13T12:00:00.000Z',
      tool_version: '0.3.2',
      global_packages: [],
      local_dependencies: [
        {
          name: 'broken-package',
          version: '',
          resolved_path: '',
        },
      ],
      local_dev_dependencies: [],
    }

    const result = renderMarkdown(reportWithMissingData)

    expect(result).toContain('| broken-package |  |  |')
  })

  it('should escape special markdown characters in package data', () => {
    const reportWithSpecialChars: Report = {
      report_version: '1.0',
      timestamp: '2025-01-13T12:00:00.000Z',
      tool_version: '0.3.2',
      global_packages: [],
      local_dependencies: [
        {
          name: 'package|with|pipes',
          version: '1.0.0',
          resolved_path: '/path/with|pipes',
        },
      ],
      local_dev_dependencies: [],
    }

    const result = renderMarkdown(reportWithSpecialChars)

    expect(result).toContain('| package|with|pipes | 1.0.0 | /path/with|pipes |')
  })

  it('should maintain consistent section ordering', () => {
    const result = renderMarkdown(mockReport)

    const lines = result.split('\n')
    const headerIndex = lines.findIndex((line) => line === '# GEX Report')
    const projectIndex = lines.findIndex((line) => line === '## Project Metadata')
    const globalIndex = lines.findIndex((line) => line === '## Global Packages')
    const localIndex = lines.findIndex((line) => line === '## Local Dependencies')
    const devIndex = lines.findIndex((line) => line === '## Local Dev Dependencies')
    const footerIndex = lines.findIndex((line) => line === '_Generated by GEX_')

    expect(headerIndex).toBeLessThan(projectIndex)
    expect(projectIndex).toBeLessThan(globalIndex)
    expect(globalIndex).toBeLessThan(localIndex)
    expect(localIndex).toBeLessThan(devIndex)
    expect(devIndex).toBeLessThan(footerIndex)
  })

  it('should generate valid markdown table structure', () => {
    const result = renderMarkdown(mockReport)

    const tableLines = result.split('\n').filter((line) => line.includes('|'))

    for (const line of tableLines) {
      if (line.includes('Name') || line.includes('---')) {
        expect(line).toMatch(/^\| .+ \| .+ \| .+ \|$/)
      } else if (line.trim().startsWith('|') && line.trim().endsWith('|')) {
        expect(line).toMatch(/^\| .* \| .* \| .* \|$/)
      }
    }
  })

  it('should handle partial project metadata', () => {
    const reportWithPartialMeta = {
      ...mockReport,
      project_description: 'Only description provided',
    }
    delete (reportWithPartialMeta as any).project_name
    delete (reportWithPartialMeta as any).project_version

    const result = renderMarkdown(reportWithPartialMeta)

    expect(result).toContain('## Project Metadata')
    expect(result).toContain('- Description: Only description provided')
    expect(result).not.toContain('- Name:')
    expect(result).not.toContain('- Version:')
  })
})
